-- Sets the initial search path, from first to last
-- override is not very important so if it fails, so be it
set_initial_search_path
{
	{ TOME_CFG_PATH.."override", "no fail" },
	{ TOME_WRITE_ROOT..".tome", "auto make", TOME_WRITE_ROOT, "/.tome" },
	TOME_CFG_PATH.."game",
}

-- Make sure a trace of the error log is kept
_ALERT_old = _ALERT
_ALERT = function(s)
	local fff = fs.open("/engine_errors.log", "a+")
        if fff then
		fs.write(fff, s.."\n")
		fs.close(fff)
        end
	_ALERT_old(s)
end

TOME_WRITE_RAW_FILES = 0


----------------------------------------------------------
-----------------------Examples---------------------------
----------------------------------------------------------


-- Example to use a compressed lib system
-- zip the files in lib to a "tome.tea" and instead of
-- loading "lib" load "file.tea"
--[[
set_initial_search_path
{
	TOME_CFG_PATH.."tome.tea",
}
]]

-- If you want to separate the T-Engine core from ToME
-- zip the core/ and mods/ (and surely some xtra/* directories)
-- in a core.tea file and the rest in a tome.team file
--[[
set_initial_search_path
{
	TOME_CFG_PATH.."core.tea",
}
-- Then you can either also add tome.team to the list or load it
-- Like any other modules by passing it to tome executable
]]
